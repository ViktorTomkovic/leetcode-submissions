defmodule Solution do
  # use https://github.com/aggelgian/erlang-algorithms/blob/master/src/graph.erl ...
  @spec min_cost(grid :: [[integer]]) :: integer
  def min_cost(grid) do
    firstRow = hd(grid)
    rows = length(grid)
    columns = length(firstRow)
    verticesSize = rows * columns
    edgesSize = verticesSize * 4
    edges = :array.new(edgesSize) |> IO.inspect()

    flattenGrid = grid |> List.flatten()

    edges =
      0..(verticesSize - 1)
      |> Enum.zip(flattenGrid)
      |> Enum.reduce(edges, fn {index, direction}, edges ->
        edges =
          if isInbounds(index + 1, verticesSize),
            do: :array.set(4 * index + 0, if(direction == 1, do: 0, else: 1), edges),
            else: edges

        edges =
          if isInbounds(index - 1, verticesSize),
            do: :array.set(4 * index + 1, if(direction == 2, do: 0, else: 1), edges),
            else: edges

        edges =
          if isInbounds(index + columns, verticesSize),
            do: :array.set(4 * index + 2, if(direction == 3, do: 0, else: 1), edges),
            else: edges

        edges =
          if isInbounds(index - columns, verticesSize),
            do: :array.set(4 * index + 3, if(direction == 4, do: 0, else: 1), edges),
            else: edges

        edges
      end)

    # edges |> IO.inspect()
    shortestPath(verticesSize, edges, edgesSize, columns, 0, verticesSize - 1)
  end

  def isInbounds(index, verticesSize), do: 0 <= index && index < verticesSize

  def shortestPath(verticesSize, edges, edgesSize, columns, startVertex, endVertex) do
    visited = MapSet.new()
    queue = Map.new()
    queue = queue |> Map.update(0, [startVertex], fn elems -> [startVertex | elems] end)
    spath(verticesSize, edges, edgesSize, columns, endVertex, queue, visited)
  end

  def spath(verticesSize, edges, edgesSize, columns, endVertex, queue, visited) do
    # queue |> IO.inspect(charlists: :as_lists)

    if queue |> map_size() > 0 do # |> IO.inspect() > 0 do
      shortestUnvisitedLength = queue |> Map.keys() |> hd() # |> IO.inspect()

      shortestUnvisitedVertices =
        queue |> Map.get(shortestUnvisitedLength) # |> IO.inspect(charlists: :as_lists)

      ##############
      if shortestUnvisitedVertices |> Enum.member?(endVertex) do
        shortestUnvisitedLength
      else
        queue = queue |> Map.delete(shortestUnvisitedLength)
        visited = shortestUnvisitedVertices |> Enum.reduce(visited, &MapSet.put(&2, &1))

        queue =
          shortestUnvisitedVertices
          # |> Enum.filter(&(!MapSet.member?(visited, &1)))
          |> Enum.reduce(queue, fn vIndex, queue ->
            queue =
              if isInbounds(vIndex + 1, verticesSize) and Integer.mod(vIndex, columns) != columns - 1 and
                   not MapSet.member?(visited, vIndex + 1) do
                pathLength = shortestUnvisitedLength + :array.get(4 * vIndex + 0, edges)
                queue |> Map.update(pathLength, [vIndex + 1], &[vIndex + 1 | &1])
              else
                queue
              end

            queue =
              if isInbounds(vIndex - 1, verticesSize) and Integer.mod(vIndex, columns) != 0 and
                   not MapSet.member?(visited, vIndex - 1) do
                pathLength = shortestUnvisitedLength + :array.get(4 * vIndex + 1, edges)
                queue |> Map.update(pathLength, [vIndex - 1], &[vIndex - 1 | &1])
              else
                queue
              end

            queue =
              if isInbounds(vIndex + columns, verticesSize) and
                   not MapSet.member?(visited, vIndex + columns) do
                pathLength = shortestUnvisitedLength + :array.get(4 * vIndex + 2, edges)
                queue |> Map.update(pathLength, [vIndex + columns], &[vIndex + columns | &1])
              else
                queue
              end

            queue =
              if isInbounds(vIndex - columns, verticesSize) and
                   not MapSet.member?(visited, vIndex - columns) do
                pathLength = shortestUnvisitedLength + :array.get(4 * vIndex + 3, edges)
                queue |> Map.update(pathLength, [vIndex - columns], &[vIndex - columns | &1])
              else
                queue
              end

            queue
          end)

        #   def spath(verticesSize, edges, edgesSize, columns, endVertex, queue, visited) do
        spath(
          verticesSize,
          edges,
          edgesSize,
          columns,
          endVertex,
          queue,
          visited
        )
      end
    else
      -1
    end
  end
end

ExUnit.start()

defmodule LeetTests do
  use ExUnit.Case,
    async: false,
    parameterize: [
      # %{grid: [[1, 1, 1, 1], [2, 2, 2, 2], [1, 1, 1, 1], [2, 2, 2, 2]], output: 3},
      # %{grid: [[1, 1, 3], [3, 2, 2], [1, 1, 4]], output: 0},
      # %{grid: [[1, 2], [4, 3]], output: 1}
      # %{
      #   grid: [
      #     [3, 4, 3],
      #     [2, 2, 2],
      #     [2, 1, 1],
      #     [4, 3, 2],
      #     [2, 1, 4],
      #     [2, 4, 1],
      #     [3, 3, 3],
      #     [1, 4, 2],
      #     [2, 2, 1],
      #     [2, 1, 1],
      #     [3, 3, 1],
      #     [4, 1, 4],
      #     [2, 1, 4],
      #     [3, 2, 2],
      #     [3, 3, 1],
      #     [4, 4, 1],
      #     [1, 2, 2],
      #     [1, 1, 1],
      #     [1, 3, 4],
      #     [1, 2, 1],
      #     [2, 2, 4],
      #     [2, 1, 3],
      #     [1, 2, 1],
      #     [4, 3, 2],
      #     [3, 3, 4],
      #     [2, 2, 1],
      #     [3, 4, 3],
      #     [4, 2, 3],
      #     [4, 4, 4]
      #   ],
      #   output: 18
      # },
      %{
        grid: [[3,3,2,1,1,3,1,2,1,2,4,2,1,4,3,4,4,4,2,2,1,3,2,3,4,3,1,1,4,1,3],[1,2,4,2,3,1,4,1,2,4,1,3,3,2,3,4,3,3,2,3,1,2,4,4,4,1,3,2,4,4,4],[4,1,1,4,3,4,1,1,1,2,4,2,3,2,3,3,4,2,4,4,3,4,1,2,1,2,4,2,2,1,3],[2,3,4,2,1,4,3,4,1,4,1,2,2,2,3,4,4,2,4,4,2,2,1,4,4,2,2,4,4,3,3],[1,4,2,3,1,4,4,4,4,1,1,4,4,4,2,4,4,3,4,4,3,2,3,1,2,2,3,2,2,4,1],[3,4,2,2,2,4,4,1,1,4,4,2,1,3,3,2,1,2,3,3,1,1,3,2,3,1,1,3,3,3,2],[2,1,4,3,2,1,4,4,1,4,1,4,4,2,2,4,1,2,4,2,4,4,2,4,3,1,4,1,3,4,1],[1,1,1,2,1,3,3,3,1,4,2,3,1,4,1,3,1,1,4,1,1,1,3,2,4,3,1,4,3,3,4],[3,3,1,3,3,3,1,2,1,2,1,1,3,3,1,3,2,4,2,3,4,3,3,3,4,3,3,2,1,3,2],[4,2,3,3,3,4,4,3,1,1,2,4,2,2,4,4,3,1,2,2,2,1,4,1,2,2,1,1,4,1,1],[2,4,4,2,2,4,1,2,1,2,3,2,4,4,3,1,3,1,3,1,1,1,2,3,1,4,3,3,3,2,1],[4,1,2,4,3,4,1,4,3,4,4,2,2,3,3,4,2,4,1,3,1,3,3,2,3,4,4,4,4,1,3],[3,2,2,1,3,1,2,4,1,2,2,4,3,3,4,4,2,2,2,1,4,4,1,3,1,2,2,1,3,4,1],[3,1,2,4,2,4,1,2,3,4,4,2,3,4,1,1,2,1,4,3,4,3,4,2,4,1,1,4,3,4,1],[4,3,2,4,2,2,4,4,2,4,3,2,4,1,4,1,3,4,4,2,1,4,4,4,2,1,4,2,3,1,1],[4,2,4,3,3,2,3,3,3,4,1,3,3,2,4,3,2,1,2,1,1,4,1,1,4,4,1,1,2,3,2],[1,4,3,4,4,3,3,3,1,1,3,1,1,1,4,1,2,1,3,4,4,4,1,4,4,4,3,3,1,2,3],[2,1,4,4,3,2,2,1,1,2,2,4,2,2,3,4,2,3,4,4,4,1,4,2,4,2,2,3,1,2,2],[2,2,2,1,1,1,2,4,3,2,2,4,2,3,3,2,1,2,3,1,4,4,2,2,3,3,2,2,4,4,4],[1,4,2,1,4,1,1,1,4,2,2,4,4,2,1,4,4,4,3,1,1,2,3,2,2,1,2,2,1,2,4],[1,1,1,3,3,3,1,4,1,1,1,3,2,1,3,3,4,3,1,1,3,3,4,2,3,2,1,2,3,2,3],[1,3,4,2,2,2,2,4,3,1,3,3,1,3,4,1,2,3,1,3,4,2,3,2,4,1,3,3,1,3,2],[2,4,4,2,1,2,3,2,3,4,1,2,2,4,2,3,3,1,4,1,3,3,3,1,2,1,2,4,2,4,1],[1,2,1,1,3,3,2,2,1,4,1,2,4,4,1,2,2,2,1,3,1,1,3,1,2,2,4,3,3,1,1],[3,1,2,2,4,1,2,4,4,1,3,1,4,1,4,2,3,2,1,4,1,1,2,3,4,1,2,2,2,1,1],[1,4,3,4,2,2,1,3,2,3,4,4,1,4,4,2,4,4,2,1,1,1,2,3,3,1,4,1,1,2,1],[1,4,4,3,2,1,4,2,3,2,2,4,4,1,2,3,3,2,3,1,4,2,1,4,1,2,3,4,1,3,3],[2,3,2,2,2,4,1,1,4,2,4,1,2,4,2,3,1,3,3,1,2,3,2,2,1,2,3,3,3,2,3],[1,2,2,1,3,4,2,2,3,3,3,3,1,2,3,3,3,3,3,3,1,1,1,1,3,3,1,4,2,2,3],[3,3,1,1,2,3,1,2,2,2,4,3,2,1,1,1,4,1,4,1,4,4,1,2,1,2,3,4,1,3,3],[3,1,4,2,2,1,4,1,3,4,2,2,2,1,2,4,4,3,2,3,2,3,1,2,1,3,1,2,4,1,2],[2,3,2,4,3,2,3,1,2,3,3,3,1,1,2,3,1,2,4,3,4,2,4,2,2,3,1,1,1,1,3],[3,3,1,2,4,4,1,1,4,1,2,3,1,2,1,3,2,4,4,4,3,2,3,4,4,1,2,3,3,4,3],[1,2,2,4,3,4,2,2,3,3,3,1,1,2,2,2,3,4,3,4,1,2,2,2,1,4,4,3,4,3,1],[1,4,2,2,4,1,1,2,1,4,2,1,4,1,3,1,1,2,1,4,1,3,1,4,2,3,2,3,3,1,2],[3,3,4,2,2,4,1,4,4,4,3,2,1,3,2,3,2,4,2,1,2,4,2,2,3,3,3,1,1,3,3],[3,1,1,3,4,3,4,2,3,4,2,2,2,3,4,1,3,2,1,4,4,3,3,4,4,4,4,1,3,1,2],[1,1,4,4,4,4,2,4,2,1,2,4,3,1,1,1,1,1,2,1,4,2,2,3,1,1,4,2,1,4,1],[2,2,2,4,2,2,4,1,1,4,2,1,1,4,3,4,1,2,4,1,4,1,4,2,1,1,2,3,2,3,4],[3,3,4,2,2,3,1,1,2,4,3,4,2,2,2,3,1,1,1,2,4,1,1,2,3,2,3,1,3,1,1],[1,4,3,2,4,1,1,4,2,4,3,2,4,4,4,3,3,1,4,4,2,4,3,1,1,1,4,1,2,4,2],[1,2,4,1,1,2,4,4,1,1,4,3,3,4,2,4,1,3,4,4,4,2,2,4,2,3,2,4,2,2,2],[1,3,2,4,2,3,4,2,4,1,1,4,4,3,2,2,1,1,1,3,1,2,4,3,2,1,4,3,4,2,3],[4,3,4,1,2,4,1,1,3,3,4,1,3,4,3,4,2,2,2,4,3,1,3,4,1,3,4,1,1,3,1],[3,3,2,3,2,2,1,2,2,2,3,4,1,3,2,4,4,4,1,1,1,3,1,1,2,3,4,3,3,4,2],[4,2,4,2,1,4,3,1,3,2,1,2,2,4,3,2,4,4,4,3,2,1,1,1,3,3,4,2,4,3,2],[1,2,3,4,3,1,3,1,2,3,4,2,1,3,1,4,3,2,3,4,4,4,3,2,1,3,3,2,2,1,3],[3,3,4,3,4,2,2,4,1,1,1,1,3,4,2,4,3,1,4,4,4,2,4,4,1,2,3,3,4,2,2],[4,3,2,1,4,3,4,1,2,2,2,3,2,1,1,3,1,1,1,4,4,2,2,3,4,4,2,3,1,1,3],[4,1,2,4,4,1,3,2,3,1,3,2,2,2,4,4,4,3,4,2,3,2,3,3,2,4,3,3,4,4,4],[4,4,1,2,3,2,2,3,1,2,2,4,1,2,2,4,3,4,1,1,2,2,2,1,2,1,1,4,4,2,3],[1,2,3,4,3,4,4,2,1,2,3,3,1,3,2,2,3,3,1,3,1,1,3,3,3,4,2,2,3,2,2],[1,4,1,1,4,2,1,4,2,2,3,4,3,2,4,1,3,2,1,4,3,2,4,2,3,3,1,2,1,1,3],[2,1,4,1,1,4,4,4,2,2,4,4,2,3,2,1,1,1,4,1,3,4,3,3,2,1,3,1,1,2,1],[1,1,2,4,2,4,2,1,2,1,2,1,3,4,2,2,2,3,2,3,2,4,3,1,4,3,4,2,3,1,2],[4,2,1,2,1,2,2,1,3,3,3,4,4,1,1,4,2,4,4,3,4,4,2,2,2,3,4,2,3,2,3],[4,4,2,4,2,1,3,4,2,3,3,4,4,4,1,3,4,1,1,2,3,3,4,3,2,2,3,3,3,1,3],[2,3,2,2,2,3,1,3,4,4,4,2,1,2,2,2,4,4,4,1,4,1,3,2,3,3,4,3,1,2,2],[4,1,4,4,1,3,1,2,2,4,4,4,4,4,3,1,1,1,2,3,3,3,4,2,1,2,1,2,2,1,4],[1,4,3,2,4,4,2,4,2,2,3,3,2,3,2,4,4,4,4,1,3,1,3,1,2,2,4,2,2,1,2],[1,3,3,2,3,1,4,4,1,1,3,2,3,1,1,3,1,1,4,4,2,1,2,3,1,1,4,1,2,4,4],[4,1,1,4,1,4,2,1,3,4,3,3,1,3,4,1,4,1,1,4,1,4,4,4,4,1,2,4,4,1,2],[3,2,3,4,2,2,2,1,2,2,4,1,3,2,4,1,3,3,4,4,4,1,3,4,2,3,2,3,1,2,4],[1,3,2,2,2,1,3,2,4,3,2,2,3,1,4,1,4,2,1,2,3,2,2,2,1,2,3,3,1,3,4],[1,2,4,2,4,1,1,4,1,1,1,3,1,1,4,3,1,2,3,3,4,1,4,3,3,4,2,1,2,4,4],[3,3,2,3,4,2,3,4,4,3,4,1,2,2,2,3,3,4,3,2,2,3,1,2,2,1,2,4,4,4,2],[1,2,3,1,3,4,1,3,3,1,3,1,3,1,3,2,4,4,3,3,1,3,4,1,2,2,4,4,3,2,1],[4,4,1,4,1,4,2,4,1,1,3,2,1,4,3,3,2,2,2,2,2,2,2,3,3,3,4,3,1,2,2],[4,1,2,2,4,4,3,2,2,4,2,3,4,4,3,4,1,1,2,4,2,4,2,2,1,1,2,1,2,4,1],[2,4,1,1,1,4,4,1,1,1,4,3,4,3,4,2,3,4,1,1,4,3,1,4,3,2,1,4,2,3,4],[2,1,4,4,1,1,2,3,4,3,2,2,4,4,2,1,4,1,2,3,4,4,4,4,4,4,2,3,4,4,1],[4,1,1,1,4,2,1,4,3,1,2,1,2,1,3,4,1,3,4,4,1,2,2,4,3,1,1,4,3,3,1],[4,2,1,1,4,3,1,4,4,3,2,3,3,1,4,4,3,3,4,4,1,3,4,3,1,4,2,1,1,3,2],[4,4,2,2,2,3,2,4,2,1,2,2,1,4,2,3,3,2,4,2,3,3,2,1,1,3,1,1,4,3,3],[1,4,2,1,2,2,3,3,2,3,3,4,1,4,4,2,2,3,3,2,4,2,1,2,1,4,4,2,1,2,3],[1,3,2,2,4,2,1,3,1,4,1,3,4,1,3,2,4,3,1,4,1,3,2,2,3,4,1,1,4,4,2],[4,2,2,3,3,4,2,1,3,2,4,2,1,1,1,2,3,1,2,1,3,2,1,1,4,2,3,4,4,3,3],[2,2,2,3,2,1,3,4,2,4,3,2,4,1,2,2,3,2,3,1,3,2,3,3,2,4,4,2,3,4,3],[2,1,3,3,4,3,3,2,4,4,4,4,2,2,1,4,1,3,4,3,4,2,2,2,1,3,3,4,2,2,3],[3,1,2,4,2,1,2,4,1,3,4,2,3,4,4,1,3,2,1,3,2,2,3,1,4,3,4,3,3,3,4],[4,2,3,4,3,2,3,2,3,3,4,4,1,2,4,3,3,2,1,3,4,2,4,1,4,4,3,3,2,1,2],[1,1,1,3,2,1,2,2,2,3,2,2,3,2,2,1,3,4,3,2,2,3,4,3,3,4,3,4,2,1,4],[3,4,4,1,1,4,1,2,4,1,1,4,3,4,1,4,2,1,3,2,2,2,2,3,3,4,1,2,1,3,1],[3,1,2,4,3,2,3,3,2,2,2,4,4,1,4,3,1,4,4,4,4,1,2,1,3,2,2,1,3,2,4],[4,1,3,3,1,1,4,4,3,3,4,3,2,2,1,3,2,1,2,3,3,4,2,2,1,1,4,3,1,4,4],[4,3,4,1,3,3,2,1,4,4,4,4,3,3,2,1,2,1,2,4,3,1,2,2,1,2,2,4,3,2,2],[3,4,2,3,3,3,2,2,3,2,1,2,3,4,1,4,1,1,2,3,2,2,2,1,2,4,3,4,3,1,1],[2,3,3,3,1,1,1,2,4,3,1,3,1,1,2,2,2,3,1,3,2,1,2,4,3,2,3,4,2,4,3],[2,4,2,3,4,2,1,2,1,1,4,3,3,4,3,3,3,3,3,1,3,3,4,2,1,3,3,3,4,3,1],[3,2,4,4,1,4,1,4,2,2,1,2,4,3,3,2,1,2,4,4,3,2,2,4,4,3,2,3,1,3,1]], output: 47
      }
    ]

  # 29x3

  test "leet", %{grid: grid, output: output} do
    assert Solution.min_cost(grid) == output
  end
end
